name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  # Continuous Integration Job
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  # Continuous Delivery Job
  build-and-push-acr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.CLIENTID }}",
              "clientSecret": "${{ secrets.CLIENTSECRET }}",
              "subscriptionId": "${{ secrets.SUBSCRIPTIONID }}",
              "tenantId": "${{ secrets.TENANTID }}"
            }

      - name: Login to ACR
        run: |
          ACR_REGISTRY="${{ secrets.AZURE_ACR_NAME }}.azurecr.io"
          echo ${{ secrets.CLIENTSECRET }} | docker login $ACR_REGISTRY -u ${{ secrets.CLIENTID }} --password-stdin
          sleep 5  # Wait for ACR authentication to propagate

      - name: Build, tag, and push image to ACR
        env:
          ACR_REGISTRY: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io
          IMAGE_TAG: latest
        run: |
          docker build -t $ACR_REGISTRY/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG .
          docker push $ACR_REGISTRY/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG

  # Continuous Deployment Job
  Continuous-Deployment:
    needs: build-and-push-acr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: |
          if ! command -v az &> /dev/null; then
            echo "Azure CLI not found, installing..."
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          else
            echo "Azure CLI is already installed"
          fi

      - name: Verify Azure CLI Installation
        run: az version

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.CLIENTID }}",
              "clientSecret": "${{ secrets.CLIENTSECRET }}",
              "subscriptionId": "${{ secrets.SUBSCRIPTIONID }}",
              "tenantId": "${{ secrets.TENANTID }}"
            }

      - name: Pull latest image from ACR
        env:
          ACR_REGISTRY: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io
          IMAGE_TAG: latest
        run: |
          docker pull $ACR_REGISTRY/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG

      - name: Run Docker Container
        env:
          ACR_REGISTRY: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io
          IMAGE_TAG: latest
        run: |
          docker run -d -p 8080:8080 --name=cnncls \
            -e AZURE_CLIENT_ID=${{ secrets.CLIENTID }} \
            -e AZURE_CLIENT_SECRET=${{ secrets.CLIENTSECRET }} \
            -e AZURE_TENANT_ID=${{ secrets.TENANTID }} \
            $ACR_REGISTRY/${{ secrets.ECR_REPOSITORY_NAME }}:$IMAGE_TAG

      - name: Clean up unused images and containers
        run: docker system prune -f
